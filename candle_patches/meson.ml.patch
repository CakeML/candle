35a36,40
> let pp_exn e =
>   match e with
>   | Cut -> Pretty_printer.token "Cut"
>   | _ -> pp_exn e;;
> 
392a398
>       Interrupt.poll ();
445a452
>       Interrupt.poll ();
448c455
<         (Format.print_string
---
>         (print
451c458
<          Format.print_newline())
---
>          print"\n")
453,454c460
<         (Format.print_string(string_of_int (!inferences)^"..");
<          Format.print_flush())
---
>         print(string_of_int (!inferences)^"..")
460c466
<             (Format.print_string
---
>             (print
463c469
<              Format.print_newline())
---
>              print"\n")
465,466c471,472
<             (Format.print_string("solved at "^string_of_int (!inferences));
<              Format.print_newline())
---
>             (print("solved at "^string_of_int (!inferences));
>              print"\n")
497c503
<       let prs = setify (map (fst o snd o fst) rawrules) in
---
>       let prs = setify Int.(<) (map (fst o snd o fst) rawrules) in
507c513
<   let optimize_rules =
---
>   let optimize_rules xs =
510c516
<     map (fun (a,b) -> a,optimize_clause_order b)
---
>     map (fun (a,b) -> a,optimize_clause_order b) xs
753,754c759
<         setify' (fun th th' -> dest_thm th <= dest_thm th')
<                 equals_thm (mapfilter (C INST_TYPE th) tyins) in
---
>         setify' Thm.(<) equals_thm (mapfilter (C INST_TYPE th) tyins) in
844c849
< (* Also introduce a rule.                                                    *)
---
> (* Also introduce a rule.                                                  *)
847,854c852
< let MESON ths tm =
<   let th = TAC_PROOF(([],tm),MESON_TAC ths) in
<   let asl,tm' = dest_thm th in
<   if asl <> [] && not(subset asl (unions (map hyp ths)))
<   then failwith "MESON: too many assumptions in result"
<   else if tm' = tm then th else
<   try EQ_MP (ALPHA tm' tm) th
<   with Failure _ -> failwith "MESON: the wrong result";;
---
> let MESON ths tm = prove(tm,MESON_TAC ths);;
