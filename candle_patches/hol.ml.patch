14,17c14
< #directory "+compiler-libs";;
< 
< let hol_dir = ref
<   (try Sys.getenv "HOLLIGHT_DIR" with Not_found -> Sys.getcwd());;
---
> let hol_dir = ref "hol-light/";;
28,85d24
< (* Load in parsing extensions.                                               *)
< (* For Ocaml < 3.10, use the built-in camlp4                                 *)
< (* and for Ocaml >= 3.10, use camlp5 instead.                                *)
< (* ------------------------------------------------------------------------- *)
< 
< if let v = String.sub Sys.ocaml_version 0 4 in v >= "3.10"
< then (Topdirs.dir_directory "+camlp5";
<       Topdirs.dir_load Format.std_formatter "camlp5o.cma")
< else (Topdirs.dir_load Format.std_formatter "camlp4o.cma");;
< 
< Topdirs.dir_load Format.std_formatter (Filename.concat (!hol_dir) "pa_j.cmo");;
< 
< (* ------------------------------------------------------------------------- *)
< (* Load files from system and/or user-settable directories.                  *)
< (* Paths map initial "$/" to !hol_dir dynamically; use $$ to get the actual  *)
< (* $ character at the start of a directory.                                  *)
< (* ------------------------------------------------------------------------- *)
< 
< let use_file s =
<   if Toploop.use_file Format.std_formatter s then ()
<   else (Format.print_string("Error in included file "^s);
<         Format.print_newline());;
< 
< let hol_expand_directory s =
<   if s = "$" || s = "$/" then !hol_dir
<   else if s = "$$" then "$"
<   else if String.length s <= 2 then s
<   else if String.sub s 0 2 = "$$" then (String.sub s 1 (String.length s - 1))
<   else if String.sub s 0 2 = "$/"
<   then Filename.concat (!hol_dir) (String.sub s 2 (String.length s - 2))
<   else s;;
< 
< let load_path = ref ["."; "$"];;
< 
< let loaded_files = ref [];;
< 
< let file_on_path p s =
<   if not (Filename.is_relative s) then s else
<   let p' = List.map hol_expand_directory p in
<   let d = List.find (fun d -> Sys.file_exists(Filename.concat d s)) p' in
<   Filename.concat (if d = "." then Sys.getcwd() else d) s;;
< 
< let load_on_path p s =
<   let s' = file_on_path p s in
<   let fileid = (Filename.basename s',Digest.file s') in
<   (use_file s'; loaded_files := fileid::(!loaded_files));;
< 
< let loads s = load_on_path ["$"] s;;
< 
< let loadt s = load_on_path (!load_path) s;;
< 
< let needs s =
<   let s' = file_on_path (!load_path) s in
<   let fileid = (Filename.basename s',Digest.file s') in
<   if List.mem fileid (!loaded_files)
<   then Format.print_string("File \""^s^"\" already loaded\n") else loadt s;;
< 
< (* ------------------------------------------------------------------------- *)
89,90c28,30
< loads "system.ml";;     (* Set up proper parsing and load bignums            *)
< loads "lib.ml";;        (* Various useful general library functions          *)
---
> loads "system.ml";;      (* Set up proper parsing                            *)
> loads "candle_nums.ml";; (* Load bignums                                     *)
> loads "lib.ml";;         (* Various useful general library functions         *)
93c33
< (* The logical core.                                                         *)
---
> (* Candle things.                                                            *)
96c36,37
< loads "fusion.ml";;
---
> loads "candle_kernel.ml";;               (* Brings Candle kernel into scope. *)
> loads "candle_pretty.ml";;               (* Pretty printer code.             *)
122a64
> 
128a71,72
> 
> (*
131a76,77
> *)
> 
139a86
> (*
140a88,89
> *)
> 
153a103
> 
164a115,116
> 
> (*
166a119
> *)
