38c38
< let enter =
---
> let enter lconsts =
49,59d48
<   let canon_eq x y =
<     try Pervasives.compare x y = 0 with Invalid_argument _ -> false
<   and canon_lt x y =
<     try Pervasives.compare x y < 0 with Invalid_argument _ -> false in
<   let rec sinsert x l =
<     if l = [] then [x] else
<     let h = hd l in
<     if canon_eq h x then failwith "sinsert" else
<     if canon_lt x h then x::l else
<     h::(sinsert x (tl l)) in
<   let set_insert x l = try sinsert x l with Failure "sinsert" -> l in
62c51
<       [] -> Netnode(edges,set_insert elem tips)
---
>       [] -> Netnode(edges,tips @ [elem])
70c59
<   fun lconsts (tm,elem) net -> net_update lconsts (elem,[tm],net);;
---
>   fun (tm,elem) net -> net_update lconsts (elem,[tm],net);;
76c65
< let lookup =
---
> let lookup tm =
94c83
<   fun tm net -> follow([tm],net);;
---
>   fun net -> follow([tm],net);;
100,120c89,95
< let merge_nets =
<   let canon_eq x y =
<     try Pervasives.compare x y = 0 with Invalid_argument _ -> false
<   and canon_lt x y =
<     try Pervasives.compare x y < 0 with Invalid_argument _ -> false in
<   let rec set_merge l1 l2 =
<     if l1 = [] then l2
<     else if l2 = [] then l1 else
<     let h1 = hd l1 and t1 = tl l1
<     and h2 = hd l2 and t2 = tl l2 in
<     if canon_eq h1 h2 then h1::(set_merge t1 t2)
<     else if canon_lt h1 h2 then h1::(set_merge t1 l2)
<     else h2::(set_merge l1 t2) in
<   let rec merge_nets (Netnode(l1,data1),Netnode(l2,data2)) =
<     let add_node ((lab,net) as p) l =
<       try let (lab',net'),rest = remove (fun (x,y) -> x = lab) l in
<           (lab',merge_nets (net,net'))::rest
<       with Failure _ -> p::l in
<     Netnode(itlist add_node l2 (itlist add_node l1 []),
<             set_merge data1 data2) in
<   merge_nets;;
---
> let rec merge_nets (Netnode(l1,data1),Netnode(l2,data2)) =
>   let add_node ((lab,net) as p) l =
>     try let (lab',net'),rest = remove (fun (x,y) -> x = lab) l in
>         (lab',merge_nets (net,net'))::rest
>     with Failure _ -> p::l in
>   Netnode(itlist add_node l2 (itlist add_node l1 []),
>           data1 @ data2);;
