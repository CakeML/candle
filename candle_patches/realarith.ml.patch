101c101
<   FIRST_ASSUM(MP_TAC o AP_TERM `(*) (inv x)`) THEN
---
>   FIRST_ASSUM(MP_TAC o AP_TERM `( *) (inv x)`) THEN
431a432
>   let (|=>) x y = (x |=> y) Term.compare in
436c437
<     and mul_tm = `(*):real->real->real` in
---
>     and mul_tm = `( *):real->real->real` in
438,440c439,441
<       if tm = zero_tm then undefined
<       else if not (is_comb tm) then (tm |=> Int 1)
<       else if is_ratconst tm then (one_tm |=> rat_of_term tm) else
---
>       if tm = zero_tm then (undefined Term.compare : (term, num) func)
>       else if not (is_comb tm) then tm |=> Int 1
>       else if is_ratconst tm then one_tm |=> rat_of_term tm else
442c443
<       if not (is_comb lop) then (tm |=> Int 1) else
---
>       if not (is_comb lop) then tm |=> Int 1 else
445,446c446,447
<       else if op = mul_tm && is_ratconst l then (r |=> rat_of_term l)
<       else (tm |=> Int 1) in
---
>       else if op = mul_tm && is_ratconst l
>       then r |=> rat_of_term l else tm |=> Int 1 in
460c461
<     let le_pols' = le_pols @ map (fun v -> (v |=> Int 1)) aliens in
---
>     let le_pols' = le_pols @ map (fun v -> v |=> Int 1) aliens in
463c464
<     translator (eq,le',lt) proof;;
---
>     (translator (eq,le',lt) proof : thm) ;; (* OA: Value restriction *)
475c476
<    (<) in
---
>    Term.(<) in
632c633
<    (<) in
---
>    Term.(<) in
